//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CollectIt.Web.ChannelService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelContract", Namespace="http://schemas.datacontract.org/2004/07/CollectIt.WCF.Contracts")]
    [System.SerializableAttribute()]
    public partial class ChannelContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FiltersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSubscribingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartitionKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filters {
            get {
                return this.FiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.FiltersField, value) != true)) {
                    this.FiltersField = value;
                    this.RaisePropertyChanged("Filters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSubscribing {
            get {
                return this.IsSubscribingField;
            }
            set {
                if ((this.IsSubscribingField.Equals(value) != true)) {
                    this.IsSubscribingField = value;
                    this.RaisePropertyChanged("IsSubscribing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartitionKey {
            get {
                return this.PartitionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PartitionKeyField, value) != true)) {
                    this.PartitionKeyField = value;
                    this.RaisePropertyChanged("PartitionKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowKey {
            get {
                return this.RowKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RowKeyField, value) != true)) {
                    this.RowKeyField = value;
                    this.RaisePropertyChanged("RowKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChannelService.IChannelService")]
    public interface IChannelService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChannelService/All", ReplyAction="http://tempuri.org/IChannelService/AllResponse")]
        CollectIt.Web.ChannelService.ChannelContract[] All(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChannelService/All", ReplyAction="http://tempuri.org/IChannelService/AllResponse")]
        System.Threading.Tasks.Task<CollectIt.Web.ChannelService.ChannelContract[]> AllAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChannelService/Get", ReplyAction="http://tempuri.org/IChannelService/GetResponse")]
        CollectIt.Web.ChannelService.ChannelContract Get(string userId, string partitionKey, string rowKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChannelService/Get", ReplyAction="http://tempuri.org/IChannelService/GetResponse")]
        System.Threading.Tasks.Task<CollectIt.Web.ChannelService.ChannelContract> GetAsync(string userId, string partitionKey, string rowKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChannelServiceChannel : CollectIt.Web.ChannelService.IChannelService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChannelServiceClient : System.ServiceModel.ClientBase<CollectIt.Web.ChannelService.IChannelService>, CollectIt.Web.ChannelService.IChannelService {
        
        public ChannelServiceClient() {
        }
        
        public ChannelServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChannelServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChannelServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChannelServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CollectIt.Web.ChannelService.ChannelContract[] All(string userId) {
            return base.Channel.All(userId);
        }
        
        public System.Threading.Tasks.Task<CollectIt.Web.ChannelService.ChannelContract[]> AllAsync(string userId) {
            return base.Channel.AllAsync(userId);
        }
        
        public CollectIt.Web.ChannelService.ChannelContract Get(string userId, string partitionKey, string rowKey) {
            return base.Channel.Get(userId, partitionKey, rowKey);
        }
        
        public System.Threading.Tasks.Task<CollectIt.Web.ChannelService.ChannelContract> GetAsync(string userId, string partitionKey, string rowKey) {
            return base.Channel.GetAsync(userId, partitionKey, rowKey);
        }
    }
}
